"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const Node = require("../core/Node.js");
const Matrix4Node = require("../inputs/Matrix4Node.js");
const Matrix3Node = require("../inputs/Matrix3Node.js");
const constants = require("../core/constants.js");
const _ModelNode = class extends Node {
  constructor(scope = _ModelNode.VIEW) {
    super();
    this.scope = scope;
    this.updateType = constants.NodeUpdateType.Object;
    this._inputNode = null;
  }
  getType() {
    const scope = this.scope;
    if (scope === _ModelNode.VIEW) {
      return "mat4";
    } else if (scope === _ModelNode.NORMAL) {
      return "mat3";
    }
  }
  update(frame) {
    const object = frame.object;
    const inputNode = this._inputNode;
    const scope = this.scope;
    if (scope === _ModelNode.VIEW) {
      inputNode.value = object.modelViewMatrix;
    } else if (scope === _ModelNode.NORMAL) {
      inputNode.value = object.normalMatrix;
    }
  }
  generate(builder, output) {
    const nodeData = builder.getDataFromNode(this);
    let inputNode = this._inputNode;
    if (nodeData.inputNode === void 0) {
      const scope = this.scope;
      if (scope === _ModelNode.VIEW) {
        if (inputNode === null || inputNode.isMatrix4Node !== true) {
          inputNode = new Matrix4Node(null);
        }
      } else if (scope === _ModelNode.NORMAL) {
        if (inputNode === null || inputNode.isMatrix3Node !== true) {
          inputNode = new Matrix3Node(null);
        }
      }
      this._inputNode = inputNode;
      nodeData.inputNode = inputNode;
    }
    return inputNode.build(builder, output);
  }
};
let ModelNode = _ModelNode;
__publicField(ModelNode, "VIEW", "view");
__publicField(ModelNode, "NORMAL", "normal");
module.exports = ModelNode;
