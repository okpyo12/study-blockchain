var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
import Node from "../core/Node.mjs";
import AttributeNode from "../core/AttributeNode.mjs";
import VaryNode from "../core/VaryNode.mjs";
import ModelNode from "./ModelNode.mjs";
import CameraNode from "./CameraNode.mjs";
import OperatorNode from "../math/OperatorNode.mjs";
import MathNode from "../math/MathNode.mjs";
const _NormalNode = class extends Node {
  constructor(scope = _NormalNode.LOCAL) {
    super("vec3");
    this.scope = scope;
  }
  generate(builder, output) {
    const type = this.getType(builder);
    const nodeData = builder.getDataFromNode(this, builder.shaderStage);
    const scope = this.scope;
    let localNormalNode = nodeData.localNormalNode;
    if (localNormalNode === void 0) {
      localNormalNode = new AttributeNode("normal", "vec3");
      nodeData.localNormalNode = localNormalNode;
    }
    let outputNode = localNormalNode;
    if (scope === _NormalNode.VIEW) {
      let viewNormalNode = nodeData.viewNormalNode;
      if (viewNormalNode === void 0) {
        const unnormalizedWNNode = new OperatorNode("*", new ModelNode(ModelNode.NORMAL), localNormalNode);
        const vertexNormalNode = new MathNode(MathNode.NORMALIZE, unnormalizedWNNode);
        viewNormalNode = new MathNode(MathNode.NORMALIZE, new VaryNode(vertexNormalNode));
        nodeData.viewNormalNode = viewNormalNode;
      }
      outputNode = viewNormalNode;
    } else if (scope === _NormalNode.WORLD) {
      let worldNormalNode = nodeData.worldNormalNode;
      if (worldNormalNode === void 0) {
        const vertexNormalNode = new MathNode(
          MathNode.INVERSE_TRANSFORM_DIRETION,
          new _NormalNode(_NormalNode.VIEW),
          new CameraNode(CameraNode.VIEW)
        );
        worldNormalNode = new VaryNode(vertexNormalNode);
        nodeData.worldNormalNode = worldNormalNode;
      }
      outputNode = worldNormalNode;
    }
    const normalSnipped = outputNode.build(builder, type);
    return builder.format(normalSnipped, type, output);
  }
};
let NormalNode = _NormalNode;
__publicField(NormalNode, "LOCAL", "local");
__publicField(NormalNode, "WORLD", "world");
__publicField(NormalNode, "VIEW", "view");
export {
  NormalNode as default
};
