class WebGPUComputePipelines {
  constructor(device, glslang) {
    this.device = device;
    this.glslang = glslang;
    this.pipelines = /* @__PURE__ */ new WeakMap();
    this.shaderModules = {
      compute: /* @__PURE__ */ new WeakMap()
    };
  }
  get(param) {
    let pipeline = this.pipelines.get(param);
    if (pipeline === void 0) {
      const device = this.device;
      const shader = {
        computeShader: param.shader
      };
      const glslang = this.glslang;
      let moduleCompute = this.shaderModules.compute.get(shader);
      if (moduleCompute === void 0) {
        const byteCodeCompute = glslang.compileGLSL(shader.computeShader, "compute");
        moduleCompute = device.createShaderModule({ code: byteCodeCompute });
        this.shaderModules.compute.set(shader, moduleCompute);
      }
      const computeStage = {
        module: moduleCompute,
        entryPoint: "main"
      };
      pipeline = device.createComputePipeline({
        computeStage
      });
      this.pipelines.set(param, pipeline);
    }
    return pipeline;
  }
  dispose() {
    this.pipelines = /* @__PURE__ */ new WeakMap();
    this.shaderModules = {
      compute: /* @__PURE__ */ new WeakMap()
    };
  }
}
export {
  WebGPUComputePipelines as default
};
