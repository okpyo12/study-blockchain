"use strict";
class WebGPUAttributes {
  constructor(device) {
    this.buffers = /* @__PURE__ */ new WeakMap();
    this.device = device;
  }
  get(attribute) {
    return this.buffers.get(attribute);
  }
  remove(attribute) {
    const data = this.buffers.get(attribute);
    if (data) {
      data.buffer.destroy();
      this.buffers.delete(attribute);
    }
  }
  update(attribute, isIndex = false, usage = null) {
    let data = this.buffers.get(attribute);
    if (data === void 0) {
      if (usage === null) {
        usage = isIndex === true ? GPUBufferUsage.INDEX : GPUBufferUsage.VERTEX;
      }
      data = this._createBuffer(attribute, usage);
      this.buffers.set(attribute, data);
    } else if (usage && usage !== data.usage) {
      data.buffer.destroy();
      data = this._createBuffer(attribute, usage);
      this.buffers.set(attribute, data);
    } else if (data.version < attribute.version) {
      this._writeBuffer(data.buffer, attribute);
      data.version = attribute.version;
    }
  }
  _createBuffer(attribute, usage) {
    const array = attribute.array;
    const size = array.byteLength + (4 - array.byteLength % 4) % 4;
    const buffer = this.device.createBuffer({
      size,
      usage: usage | GPUBufferUsage.COPY_DST,
      mappedAtCreation: true
    });
    new array.constructor(buffer.getMappedRange()).set(array);
    buffer.unmap();
    attribute.onUploadCallback();
    return {
      version: attribute.version,
      buffer,
      usage
    };
  }
  _writeBuffer(buffer, attribute) {
    const array = attribute.array;
    const updateRange = attribute.updateRange;
    if (updateRange.count === -1) {
      this.device.queue.writeBuffer(buffer, 0, array, 0);
    } else {
      this.device.queue.writeBuffer(
        buffer,
        0,
        array,
        updateRange.offset * array.BYTES_PER_ELEMENT,
        updateRange.count * array.BYTES_PER_ELEMENT
      );
      updateRange.count = -1;
    }
  }
}
module.exports = WebGPUAttributes;
