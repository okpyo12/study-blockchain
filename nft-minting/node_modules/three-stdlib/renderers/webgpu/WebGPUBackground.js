"use strict";
const constants = require("./constants.js");
const THREE = require("three");
let _clearAlpha;
const _clearColor = new THREE.Color();
class WebGPUBackground {
  constructor(renderer) {
    this.renderer = renderer;
    this.forceClear = false;
  }
  clear() {
    this.forceClear = true;
  }
  update(scene) {
    const renderer = this.renderer;
    const background = scene.isScene === true ? scene.background : null;
    let forceClear = this.forceClear;
    if (background === null) {
      _clearColor.copy(renderer._clearColor);
      _clearAlpha = renderer._clearAlpha;
    } else if (background.isColor === true) {
      _clearColor.copy(background);
      _clearAlpha = 1;
      forceClear = true;
    } else {
      console.error("THREE.WebGPURenderer: Unsupported background configuration.", background);
    }
    const renderPassDescriptor = renderer._renderPassDescriptor;
    const colorAttachment = renderPassDescriptor.colorAttachments[0];
    const depthStencilAttachment = renderPassDescriptor.depthStencilAttachment;
    if (renderer.autoClear === true || forceClear === true) {
      if (renderer.autoClearColor === true) {
        colorAttachment.loadValue = {
          r: _clearColor.r,
          g: _clearColor.g,
          b: _clearColor.b,
          a: _clearAlpha
        };
      } else {
        colorAttachment.loadValue = constants.GPULoadOp.Load;
      }
      if (renderer.autoClearDepth === true) {
        depthStencilAttachment.depthLoadValue = renderer._clearDepth;
      } else {
        depthStencilAttachment.depthLoadValue = constants.GPULoadOp.Load;
      }
      if (renderer.autoClearStencil === true) {
        depthStencilAttachment.stencilLoadValue = renderer._clearDepth;
      } else {
        depthStencilAttachment.stencilLoadValue = constants.GPULoadOp.Load;
      }
    } else {
      colorAttachment.loadValue = constants.GPULoadOp.Load;
      depthStencilAttachment.depthLoadValue = constants.GPULoadOp.Load;
      depthStencilAttachment.stencilLoadValue = constants.GPULoadOp.Load;
    }
    this.forceClear = false;
  }
}
module.exports = WebGPUBackground;
