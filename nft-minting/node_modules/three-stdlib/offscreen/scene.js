"use strict";
const THREE = require("three");
function _interopNamespace(e) {
  if (e && e.__esModule)
    return e;
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const THREE__namespace = /* @__PURE__ */ _interopNamespace(THREE);
var camera, scene, renderer, group;
function init(canvas, width, height, pixelRatio, path) {
  camera = new THREE__namespace.PerspectiveCamera(40, width / height, 1, 1e3);
  camera.position.z = 200;
  scene = new THREE__namespace.Scene();
  scene.fog = new THREE__namespace.Fog(4473958, 100, 400);
  scene.background = new THREE__namespace.Color(4473958);
  group = new THREE__namespace.Group();
  scene.add(group);
  var loader = new THREE__namespace.ImageBitmapLoader().setPath(path);
  loader.setOptions({ imageOrientation: "flipY" });
  loader.load("textures/matcaps/matcap-porcelain-white.jpg", function(imageBitmap) {
    var texture = new THREE__namespace.CanvasTexture(imageBitmap);
    var geometry = new THREE__namespace.IcosahedronGeometry(5, 8);
    var materials = [
      new THREE__namespace.MeshMatcapMaterial({ color: 11150559, matcap: texture }),
      new THREE__namespace.MeshMatcapMaterial({ color: 6315408, matcap: texture }),
      new THREE__namespace.MeshMatcapMaterial({ color: 14699071, matcap: texture }),
      new THREE__namespace.MeshMatcapMaterial({ color: 14877782, matcap: texture })
    ];
    for (let i = 0; i < 100; i++) {
      var material = materials[i % materials.length];
      var mesh = new THREE__namespace.Mesh(geometry, material);
      mesh.position.x = random() * 200 - 100;
      mesh.position.y = random() * 200 - 100;
      mesh.position.z = random() * 200 - 100;
      mesh.scale.setScalar(random() + 1);
      group.add(mesh);
    }
    renderer = new THREE__namespace.WebGLRenderer({ antialias: true, canvas });
    renderer.setPixelRatio(pixelRatio);
    renderer.setSize(width, height, false);
    animate();
  });
}
function animate() {
  group.rotation.y = -Date.now() / 4e3;
  renderer.render(scene, camera);
  if (self.requestAnimationFrame) {
    self.requestAnimationFrame(animate);
  } else {
  }
}
var seed = 1;
function random() {
  var x = Math.sin(seed++) * 1e4;
  return x - Math.floor(x);
}
module.exports = init;
