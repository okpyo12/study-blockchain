import { EventDispatcher, Euler, Vector3 } from "three";
class PointerLockControls extends EventDispatcher {
  constructor(camera, domElement) {
    super();
    this.isLocked = false;
    this.minPolarAngle = 0;
    this.maxPolarAngle = Math.PI;
    this.changeEvent = { type: "change" };
    this.lockEvent = { type: "lock" };
    this.unlockEvent = { type: "unlock" };
    this.euler = new Euler(0, 0, 0, "YXZ");
    this.PI_2 = Math.PI / 2;
    this.vec = new Vector3();
    this.onMouseMove = (event) => {
      if (!this.domElement || this.isLocked === false)
        return;
      const movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;
      const movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;
      this.euler.setFromQuaternion(this.camera.quaternion);
      this.euler.y -= movementX * 2e-3;
      this.euler.x -= movementY * 2e-3;
      this.euler.x = Math.max(this.PI_2 - this.maxPolarAngle, Math.min(this.PI_2 - this.minPolarAngle, this.euler.x));
      this.camera.quaternion.setFromEuler(this.euler);
      this.dispatchEvent(this.changeEvent);
    };
    this.onPointerlockChange = () => {
      if (!this.domElement)
        return;
      if (this.domElement.ownerDocument.pointerLockElement === this.domElement) {
        this.dispatchEvent(this.lockEvent);
        this.isLocked = true;
      } else {
        this.dispatchEvent(this.unlockEvent);
        this.isLocked = false;
      }
    };
    this.onPointerlockError = () => {
      console.error("THREE.PointerLockControls: Unable to use Pointer Lock API");
    };
    this.connect = (domElement2) => {
      this.domElement = domElement2 || this.domElement;
      if (!this.domElement)
        return;
      this.domElement.ownerDocument.addEventListener("mousemove", this.onMouseMove);
      this.domElement.ownerDocument.addEventListener("pointerlockchange", this.onPointerlockChange);
      this.domElement.ownerDocument.addEventListener("pointerlockerror", this.onPointerlockError);
    };
    this.disconnect = () => {
      if (!this.domElement)
        return;
      this.domElement.ownerDocument.removeEventListener("mousemove", this.onMouseMove);
      this.domElement.ownerDocument.removeEventListener("pointerlockchange", this.onPointerlockChange);
      this.domElement.ownerDocument.removeEventListener("pointerlockerror", this.onPointerlockError);
    };
    this.dispose = () => {
      this.disconnect();
    };
    this.getObject = () => this.camera;
    this.direction = new Vector3(0, 0, -1);
    this.getDirection = (v) => v.copy(this.direction).applyQuaternion(this.camera.quaternion);
    this.moveForward = (distance) => {
      this.vec.setFromMatrixColumn(this.camera.matrix, 0);
      this.vec.crossVectors(this.camera.up, this.vec);
      this.camera.position.addScaledVector(this.vec, distance);
    };
    this.moveRight = (distance) => {
      this.vec.setFromMatrixColumn(this.camera.matrix, 0);
      this.camera.position.addScaledVector(this.vec, distance);
    };
    this.lock = () => {
      if (!this.domElement)
        return;
      this.domElement.requestPointerLock();
    };
    this.unlock = () => {
      if (!this.domElement)
        return;
      this.domElement.ownerDocument.exitPointerLock();
    };
    this.domElement = domElement;
    this.camera = camera;
    if (this.domElement)
      this.connect(this.domElement);
  }
}
export {
  PointerLockControls
};
