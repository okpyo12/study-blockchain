"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const THREE = require("three");
const Pass = require("./Pass.js");
const CopyShader = require("../shaders/CopyShader.js");
var TexturePass = function(map, opacity) {
  if (CopyShader.CopyShader === void 0)
    console.error("THREE.TexturePass relies on CopyShader");
  var shader = CopyShader.CopyShader;
  this.map = map;
  this.opacity = opacity !== void 0 ? opacity : 1;
  this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);
  this.material = new THREE.ShaderMaterial({
    uniforms: this.uniforms,
    vertexShader: shader.vertexShader,
    fragmentShader: shader.fragmentShader,
    depthTest: false,
    depthWrite: false
  });
  this.needsSwap = false;
  this.fsQuad = new Pass.FullScreenQuad(null);
};
TexturePass.prototype = Object.assign(Object.create(Pass.Pass.prototype), {
  constructor: TexturePass,
  render: function(renderer, writeBuffer, readBuffer) {
    var oldAutoClear = renderer.autoClear;
    renderer.autoClear = false;
    this.fsQuad.material = this.material;
    this.uniforms["opacity"].value = this.opacity;
    this.uniforms["tDiffuse"].value = this.map;
    this.material.transparent = this.opacity < 1;
    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);
    if (this.clear)
      renderer.clear();
    this.fsQuad.render(renderer);
    renderer.autoClear = oldAutoClear;
  }
});
exports.TexturePass = TexturePass;
