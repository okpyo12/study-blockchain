"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Pass = require("./Pass.js");
const THREE = require("three");
const HalftoneShader = require("../shaders/HalftoneShader.js");
class HalftonePass extends Pass.Pass {
  constructor(width, height, params) {
    super();
    if (HalftoneShader.HalftoneShader === void 0) {
      console.error("THREE.HalftonePass requires HalftoneShader");
    }
    this.uniforms = THREE.UniformsUtils.clone(HalftoneShader.HalftoneShader.uniforms);
    this.material = new THREE.ShaderMaterial({
      uniforms: this.uniforms,
      fragmentShader: HalftoneShader.HalftoneShader.fragmentShader,
      vertexShader: HalftoneShader.HalftoneShader.vertexShader
    });
    this.uniforms.width.value = width;
    this.uniforms.height.value = height;
    for (const key in params) {
      if (params.hasOwnProperty(key) && this.uniforms.hasOwnProperty(key)) {
        this.uniforms[key].value = params[key];
      }
    }
    this.fsQuad = new Pass.FullScreenQuad(this.material);
  }
  render(renderer, writeBuffer, readBuffer) {
    this.material.uniforms["tDiffuse"].value = readBuffer.texture;
    if (this.renderToScreen) {
      renderer.setRenderTarget(null);
      this.fsQuad.render(renderer);
    } else {
      renderer.setRenderTarget(writeBuffer);
      if (this.clear)
        renderer.clear();
      this.fsQuad.render(renderer);
    }
  }
  setSize(width, height) {
    this.uniforms.width.value = width;
    this.uniforms.height.value = height;
  }
}
exports.HalftonePass = HalftonePass;
