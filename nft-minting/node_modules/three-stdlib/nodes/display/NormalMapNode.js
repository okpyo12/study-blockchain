"use strict";
const TempNode = require("../core/TempNode.js");
const ModelNode = require("../accessors/ModelNode.js");
const ShaderNode = require("../ShaderNode.js");
const THREE = require("three");
const perturbNormal2ArbNode = new ShaderNode.ShaderNode((inputs) => {
  const { eye_pos, surf_norm, mapN, faceDirection, uv } = inputs;
  const q0 = ShaderNode.dFdx(eye_pos.xyz);
  const q1 = ShaderNode.dFdy(eye_pos.xyz);
  const st0 = ShaderNode.dFdx(uv.st);
  const st1 = ShaderNode.dFdy(uv.st);
  const N = surf_norm;
  const q1perp = ShaderNode.cross(q1, N);
  const q0perp = ShaderNode.cross(N, q0);
  const T = ShaderNode.add(ShaderNode.mul(q1perp, st0.x), ShaderNode.mul(q0perp, st1.x));
  const B = ShaderNode.add(ShaderNode.mul(q1perp, st0.y), ShaderNode.mul(q0perp, st1.y));
  const det = ShaderNode.max(ShaderNode.dot(T, T), ShaderNode.dot(B, B));
  const scale = ShaderNode.cond(ShaderNode.equal(det, 0), 0, ShaderNode.mul(faceDirection, ShaderNode.inversesqrt(det)));
  return ShaderNode.normalize(ShaderNode.add(ShaderNode.mul(T, ShaderNode.mul(mapN.x, scale)), ShaderNode.mul(B, ShaderNode.mul(mapN.y, scale)), ShaderNode.mul(N, mapN.z)));
});
class NormalMapNode extends TempNode {
  constructor(node, scaleNode = null) {
    super("vec3");
    this.node = node;
    this.scaleNode = scaleNode;
    this.normalMapType = THREE.TangentSpaceNormalMap;
  }
  generate(builder) {
    const type = this.getNodeType(builder);
    const { normalMapType, scaleNode } = this;
    const normalOP = ShaderNode.mul(this.node, 2);
    let normalMap = ShaderNode.sub(normalOP, 1);
    if (scaleNode !== null) {
      const normalMapScale = ShaderNode.mul(normalMap.xy, scaleNode);
      normalMap = ShaderNode.join(normalMapScale, normalMap.z);
    }
    if (normalMapType === THREE.ObjectSpaceNormalMap) {
      const vertexNormalNode = ShaderNode.mul(new ModelNode(ModelNode.NORMAL_MATRIX), normalMap);
      const normal = ShaderNode.normalize(vertexNormalNode);
      return normal.build(builder, type);
    } else if (normalMapType === THREE.TangentSpaceNormalMap) {
      const perturbNormal2ArbCall = perturbNormal2ArbNode({
        eye_pos: ShaderNode.positionView,
        surf_norm: ShaderNode.normalView,
        mapN: normalMap,
        faceDirection: 1,
        uv: ShaderNode.uv()
      });
      return perturbNormal2ArbCall.build(builder, type);
    }
  }
}
module.exports = NormalMapNode;
