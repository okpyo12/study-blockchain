"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const ArrayUniformNode = require("./core/ArrayUniformNode.js");
const AttributeNode = require("./core/AttributeNode.js");
const BypassNode = require("./core/BypassNode.js");
const CodeNode = require("./core/CodeNode.js");
const ConstNode = require("./core/ConstNode.js");
const ContextNode = require("./core/ContextNode.js");
const ExpressionNode = require("./core/ExpressionNode.js");
const FunctionCallNode = require("./core/FunctionCallNode.js");
const FunctionNode = require("./core/FunctionNode.js");
const Node = require("./core/Node.js");
const NodeAttribute = require("./core/NodeAttribute.js");
const NodeBuilder = require("./core/NodeBuilder.js");
const NodeCode = require("./core/NodeCode.js");
const NodeFrame = require("./core/NodeFrame.js");
const NodeFunctionInput = require("./core/NodeFunctionInput.js");
const NodeKeywords = require("./core/NodeKeywords.js");
const NodeUniform = require("./core/NodeUniform.js");
const NodeVar = require("./core/NodeVar.js");
const NodeVary = require("./core/NodeVary.js");
const PropertyNode = require("./core/PropertyNode.js");
const TempNode = require("./core/TempNode.js");
const UniformNode = require("./core/UniformNode.js");
const VarNode = require("./core/VarNode.js");
const VaryNode = require("./core/VaryNode.js");
const BufferNode = require("./accessors/BufferNode.js");
const CameraNode = require("./accessors/CameraNode.js");
const CubeTextureNode = require("./accessors/CubeTextureNode.js");
const MaterialNode = require("./accessors/MaterialNode.js");
const MaterialReferenceNode = require("./accessors/MaterialReferenceNode.js");
const ModelNode = require("./accessors/ModelNode.js");
const ModelViewProjectionNode = require("./accessors/ModelViewProjectionNode.js");
const NormalNode = require("./accessors/NormalNode.js");
const Object3DNode = require("./accessors/Object3DNode.js");
const PointUVNode = require("./accessors/PointUVNode.js");
const PositionNode = require("./accessors/PositionNode.js");
const ReferenceNode = require("./accessors/ReferenceNode.js");
const ReflectNode = require("./accessors/ReflectNode.js");
const SkinningNode = require("./accessors/SkinningNode.js");
const TextureNode = require("./accessors/TextureNode.js");
const UVNode = require("./accessors/UVNode.js");
const ColorSpaceNode = require("./display/ColorSpaceNode.js");
const NormalMapNode = require("./display/NormalMapNode.js");
const MathNode = require("./math/MathNode.js");
const OperatorNode = require("./math/OperatorNode.js");
const CondNode = require("./math/CondNode.js");
const LightContextNode = require("./lights/LightContextNode.js");
const LightNode = require("./lights/LightNode.js");
const LightsNode = require("./lights/LightsNode.js");
const ArrayElementNode = require("./utils/ArrayElementNode.js");
const ConvertNode = require("./utils/ConvertNode.js");
const JoinNode = require("./utils/JoinNode.js");
const SplitNode = require("./utils/SplitNode.js");
const SpriteSheetUVNode = require("./utils/SpriteSheetUVNode.js");
const MatcapUVNode = require("./utils/MatcapUVNode.js");
const OscNode = require("./utils/OscNode.js");
const TimerNode = require("./utils/TimerNode.js");
const NodeLoader = require("./loaders/NodeLoader.js");
const NodeObjectLoader = require("./loaders/NodeObjectLoader.js");
const NodeMaterialLoader = require("./loaders/NodeMaterialLoader.js");
const CheckerNode = require("./procedural/CheckerNode.js");
const FogNode = require("./fog/FogNode.js");
const FogRangeNode = require("./fog/FogRangeNode.js");
const constants = require("./core/constants.js");
const BSDFs = require("./functions/BSDFs.js");
require("./materials/Materials.js");
const ShaderNode = require("./ShaderNode.js");
const LineBasicNodeMaterial = require("./materials/LineBasicNodeMaterial.js");
const MeshBasicNodeMaterial = require("./materials/MeshBasicNodeMaterial.js");
const MeshStandardNodeMaterial = require("./materials/MeshStandardNodeMaterial.js");
const PointsNodeMaterial = require("./materials/PointsNodeMaterial.js");
const nodeLib = {
  ArrayUniformNode,
  AttributeNode,
  BypassNode,
  CodeNode,
  ContextNode,
  ConstNode,
  ExpressionNode,
  FunctionCallNode,
  FunctionNode,
  Node,
  NodeAttribute,
  NodeBuilder: NodeBuilder.default,
  NodeCode,
  NodeFrame,
  NodeFunctionInput,
  NodeKeywords,
  NodeUniform,
  NodeVar,
  NodeVary,
  PropertyNode,
  TempNode,
  UniformNode,
  VarNode,
  VaryNode,
  BufferNode,
  CameraNode,
  CubeTextureNode,
  MaterialNode,
  MaterialReferenceNode,
  ModelNode,
  ModelViewProjectionNode,
  NormalNode,
  Object3DNode,
  PointUVNode,
  PositionNode,
  ReferenceNode,
  ReflectNode,
  SkinningNode,
  TextureNode,
  UVNode,
  ColorSpaceNode: ColorSpaceNode.default,
  NormalMapNode,
  MathNode,
  OperatorNode,
  CondNode,
  LightContextNode,
  LightNode,
  LightsNode,
  ArrayElementNode,
  ConvertNode,
  JoinNode,
  SplitNode,
  SpriteSheetUVNode,
  MatcapUVNode,
  OscNode,
  TimerNode,
  CheckerNode,
  FogNode,
  FogRangeNode,
  NodeLoader,
  NodeObjectLoader,
  NodeMaterialLoader
};
const fromType = (type) => {
  return new nodeLib[type]();
};
exports.ArrayUniformNode = ArrayUniformNode;
exports.AttributeNode = AttributeNode;
exports.BypassNode = BypassNode;
exports.CodeNode = CodeNode;
exports.ConstNode = ConstNode;
exports.ContextNode = ContextNode;
exports.ExpressionNode = ExpressionNode;
exports.FunctionCallNode = FunctionCallNode;
exports.FunctionNode = FunctionNode;
exports.Node = Node;
exports.NodeAttribute = NodeAttribute;
exports.NodeBuilder = NodeBuilder.default;
exports.NodeCode = NodeCode;
exports.NodeFrame = NodeFrame;
exports.NodeFunctionInput = NodeFunctionInput;
exports.NodeKeywords = NodeKeywords;
exports.NodeUniform = NodeUniform;
exports.NodeVar = NodeVar;
exports.NodeVary = NodeVary;
exports.PropertyNode = PropertyNode;
exports.TempNode = TempNode;
exports.UniformNode = UniformNode;
exports.VarNode = VarNode;
exports.VaryNode = VaryNode;
exports.BufferNode = BufferNode;
exports.CameraNode = CameraNode;
exports.CubeTextureNode = CubeTextureNode;
exports.MaterialNode = MaterialNode;
exports.MaterialReferenceNode = MaterialReferenceNode;
exports.ModelNode = ModelNode;
exports.ModelViewProjectionNode = ModelViewProjectionNode;
exports.NormalNode = NormalNode;
exports.Object3DNode = Object3DNode;
exports.PointUVNode = PointUVNode;
exports.PositionNode = PositionNode;
exports.ReferenceNode = ReferenceNode;
exports.ReflectNode = ReflectNode;
exports.SkinningNode = SkinningNode;
exports.TextureNode = TextureNode;
exports.UVNode = UVNode;
exports.ColorSpaceNode = ColorSpaceNode.default;
exports.NormalMapNode = NormalMapNode;
exports.MathNode = MathNode;
exports.OperatorNode = OperatorNode;
exports.CondNode = CondNode;
exports.LightContextNode = LightContextNode;
exports.LightNode = LightNode;
exports.LightsNode = LightsNode;
exports.ArrayElementNode = ArrayElementNode;
exports.ConvertNode = ConvertNode;
exports.JoinNode = JoinNode;
exports.SplitNode = SplitNode;
exports.SpriteSheetUVNode = SpriteSheetUVNode;
exports.MatcapUVNode = MatcapUVNode;
exports.OscNode = OscNode;
exports.TimerNode = TimerNode;
exports.NodeLoader = NodeLoader;
exports.NodeObjectLoader = NodeObjectLoader;
exports.NodeMaterialLoader = NodeMaterialLoader;
exports.CheckerNode = CheckerNode;
exports.FogNode = FogNode;
exports.FogRangeNode = FogRangeNode;
exports.NodeShaderStage = constants.NodeShaderStage;
exports.NodeType = constants.NodeType;
exports.NodeUpdateType = constants.NodeUpdateType;
exports.BRDF_GGX = BSDFs.BRDF_GGX;
exports.BRDF_Lambert = BSDFs.BRDF_Lambert;
exports.D_GGX = BSDFs.D_GGX;
exports.F_Schlick = BSDFs.F_Schlick;
exports.PhysicalLightingModel = BSDFs.PhysicalLightingModel;
exports.RE_Direct_Physical = BSDFs.RE_Direct_Physical;
exports.V_GGX_SmithCorrelated = BSDFs.V_GGX_SmithCorrelated;
exports.getDistanceAttenuation = BSDFs.getDistanceAttenuation;
exports.EPSILON = ShaderNode.EPSILON;
exports.INFINITY = ShaderNode.INFINITY;
exports.ShaderNode = ShaderNode.ShaderNode;
exports.abs = ShaderNode.abs;
exports.acos = ShaderNode.acos;
exports.add = ShaderNode.add;
exports.addTo = ShaderNode.addTo;
exports.alphaTest = ShaderNode.alphaTest;
exports.and = ShaderNode.and;
exports.asin = ShaderNode.asin;
exports.assign = ShaderNode.assign;
exports.atan = ShaderNode.atan;
exports.attribute = ShaderNode.attribute;
exports.bitAnd = ShaderNode.bitAnd;
exports.bitOr = ShaderNode.bitOr;
exports.bitXor = ShaderNode.bitXor;
exports.bmat3 = ShaderNode.bmat3;
exports.bmat4 = ShaderNode.bmat4;
exports.bool = ShaderNode.bool;
exports.buffer = ShaderNode.buffer;
exports.bvec2 = ShaderNode.bvec2;
exports.bvec3 = ShaderNode.bvec3;
exports.bvec4 = ShaderNode.bvec4;
exports.cameraPosition = ShaderNode.cameraPosition;
exports.ceil = ShaderNode.ceil;
exports.clamp = ShaderNode.clamp;
exports.color = ShaderNode.color;
exports.cond = ShaderNode.cond;
exports.cos = ShaderNode.cos;
exports.cross = ShaderNode.cross;
exports.dFdx = ShaderNode.dFdx;
exports.dFdy = ShaderNode.dFdy;
exports.degrees = ShaderNode.degrees;
exports.diffuseColor = ShaderNode.diffuseColor;
exports.distance = ShaderNode.distance;
exports.div = ShaderNode.div;
exports.dot = ShaderNode.dot;
exports.element = ShaderNode.element;
exports.equal = ShaderNode.equal;
exports.exp = ShaderNode.exp;
exports.exp2 = ShaderNode.exp2;
exports.faceforward = ShaderNode.faceforward;
exports.float = ShaderNode.float;
exports.floor = ShaderNode.floor;
exports.fract = ShaderNode.fract;
exports.greaterThan = ShaderNode.greaterThan;
exports.greaterThanEqual = ShaderNode.greaterThanEqual;
exports.imat3 = ShaderNode.imat3;
exports.imat4 = ShaderNode.imat4;
exports.int = ShaderNode.int;
exports.inversesqrt = ShaderNode.inversesqrt;
exports.invert = ShaderNode.invert;
exports.ivec2 = ShaderNode.ivec2;
exports.ivec3 = ShaderNode.ivec3;
exports.ivec4 = ShaderNode.ivec4;
exports.join = ShaderNode.join;
exports.label = ShaderNode.label;
exports.length = ShaderNode.length;
exports.lessThan = ShaderNode.lessThan;
exports.lessThanEqual = ShaderNode.lessThanEqual;
exports.log = ShaderNode.log;
exports.log2 = ShaderNode.log2;
exports.mat3 = ShaderNode.mat3;
exports.mat4 = ShaderNode.mat4;
exports.max = ShaderNode.max;
exports.metalness = ShaderNode.metalness;
exports.min = ShaderNode.min;
exports.mix = ShaderNode.mix;
exports.mod = ShaderNode.mod;
exports.mul = ShaderNode.mul;
exports.negate = ShaderNode.negate;
exports.nodeObject = ShaderNode.nodeObject;
exports.normalGeometry = ShaderNode.normalGeometry;
exports.normalLocal = ShaderNode.normalLocal;
exports.normalView = ShaderNode.normalView;
exports.normalWorld = ShaderNode.normalWorld;
exports.normalize = ShaderNode.normalize;
exports.or = ShaderNode.or;
exports.positionLocal = ShaderNode.positionLocal;
exports.positionView = ShaderNode.positionView;
exports.positionViewDirection = ShaderNode.positionViewDirection;
exports.positionWorld = ShaderNode.positionWorld;
exports.pow = ShaderNode.pow;
exports.pow2 = ShaderNode.pow2;
exports.pow3 = ShaderNode.pow3;
exports.pow4 = ShaderNode.pow4;
exports.radians = ShaderNode.radians;
exports.reflect = ShaderNode.reflect;
exports.refract = ShaderNode.refract;
exports.remainder = ShaderNode.remainder;
exports.roughness = ShaderNode.roughness;
exports.round = ShaderNode.round;
exports.sampler = ShaderNode.sampler;
exports.saturate = ShaderNode.saturate;
exports.shiftLeft = ShaderNode.shiftLeft;
exports.shiftRight = ShaderNode.shiftRight;
exports.sign = ShaderNode.sign;
exports.sin = ShaderNode.sin;
exports.smoothstep = ShaderNode.smoothstep;
exports.specularColor = ShaderNode.specularColor;
exports.sqrt = ShaderNode.sqrt;
exports.step = ShaderNode.step;
exports.sub = ShaderNode.sub;
exports.tan = ShaderNode.tan;
exports.temp = ShaderNode.temp;
exports.texture = ShaderNode.texture;
exports.transformDirection = ShaderNode.transformDirection;
exports.transformedNormalView = ShaderNode.transformedNormalView;
exports.uint = ShaderNode.uint;
exports.umat3 = ShaderNode.umat3;
exports.umat4 = ShaderNode.umat4;
exports.uniform = ShaderNode.uniform;
exports.uv = ShaderNode.uv;
exports.uvec2 = ShaderNode.uvec2;
exports.uvec3 = ShaderNode.uvec3;
exports.uvec4 = ShaderNode.uvec4;
exports.vec2 = ShaderNode.vec2;
exports.vec3 = ShaderNode.vec3;
exports.vec4 = ShaderNode.vec4;
exports.viewMatrix = ShaderNode.viewMatrix;
exports.xor = ShaderNode.xor;
exports.LineBasicNodeMaterial = LineBasicNodeMaterial;
exports.MeshBasicNodeMaterial = MeshBasicNodeMaterial;
exports.MeshStandardNodeMaterial = MeshStandardNodeMaterial;
exports.PointsNodeMaterial = PointsNodeMaterial;
exports.fromType = fromType;
