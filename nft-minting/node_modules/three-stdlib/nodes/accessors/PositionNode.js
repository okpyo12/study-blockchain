"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const Node = require("../core/Node.js");
const AttributeNode = require("../core/AttributeNode.js");
const VaryNode = require("../core/VaryNode.js");
const ModelNode = require("./ModelNode.js");
const MathNode = require("../math/MathNode.js");
const OperatorNode = require("../math/OperatorNode.js");
const _PositionNode = class extends Node {
  constructor(scope = _PositionNode.LOCAL) {
    super("vec3");
    this.scope = scope;
  }
  getHash() {
    return `position-${this.scope}`;
  }
  generate(builder) {
    const scope = this.scope;
    let outputNode = null;
    if (scope === _PositionNode.GEOMETRY) {
      outputNode = new AttributeNode("position", "vec3");
    } else if (scope === _PositionNode.LOCAL) {
      outputNode = new VaryNode(new _PositionNode(_PositionNode.GEOMETRY));
    } else if (scope === _PositionNode.WORLD) {
      const vertexPositionNode = new MathNode(
        MathNode.TRANSFORM_DIRECTION,
        new ModelNode(ModelNode.WORLD_MATRIX),
        new _PositionNode(_PositionNode.LOCAL)
      );
      outputNode = new VaryNode(vertexPositionNode);
    } else if (scope === _PositionNode.VIEW) {
      const vertexPositionNode = new OperatorNode(
        "*",
        new ModelNode(ModelNode.VIEW_MATRIX),
        new _PositionNode(_PositionNode.LOCAL)
      );
      outputNode = new VaryNode(vertexPositionNode);
    } else if (scope === _PositionNode.VIEW_DIRECTION) {
      const vertexPositionNode = new MathNode(MathNode.NEGATE, new _PositionNode(_PositionNode.VIEW));
      outputNode = new MathNode(MathNode.NORMALIZE, new VaryNode(vertexPositionNode));
    }
    return outputNode.build(builder, this.getNodeType(builder));
  }
  serialize(data) {
    super.serialize(data);
    data.scope = this.scope;
  }
  deserialize(data) {
    super.deserialize(data);
    this.scope = data.scope;
  }
};
let PositionNode = _PositionNode;
__publicField(PositionNode, "GEOMETRY", "geometry");
__publicField(PositionNode, "LOCAL", "local");
__publicField(PositionNode, "WORLD", "world");
__publicField(PositionNode, "VIEW", "view");
__publicField(PositionNode, "VIEW_DIRECTION", "viewDirection");
module.exports = PositionNode;
