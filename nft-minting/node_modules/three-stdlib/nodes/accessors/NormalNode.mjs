var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
import Node from "../core/Node.mjs";
import AttributeNode from "../core/AttributeNode.mjs";
import VaryNode from "../core/VaryNode.mjs";
import ModelNode from "./ModelNode.mjs";
import CameraNode from "./CameraNode.mjs";
import OperatorNode from "../math/OperatorNode.mjs";
import MathNode from "../math/MathNode.mjs";
const _NormalNode = class extends Node {
  constructor(scope = _NormalNode.LOCAL) {
    super("vec3");
    this.scope = scope;
  }
  getHash() {
    return `normal-${this.scope}`;
  }
  generate(builder) {
    const scope = this.scope;
    let outputNode = null;
    if (scope === _NormalNode.GEOMETRY) {
      outputNode = new AttributeNode("normal", "vec3");
    } else if (scope === _NormalNode.LOCAL) {
      outputNode = new VaryNode(new _NormalNode(_NormalNode.GEOMETRY));
    } else if (scope === _NormalNode.VIEW) {
      const vertexNormalNode = new OperatorNode(
        "*",
        new ModelNode(ModelNode.NORMAL_MATRIX),
        new _NormalNode(_NormalNode.LOCAL)
      );
      outputNode = new MathNode(MathNode.NORMALIZE, new VaryNode(vertexNormalNode));
    } else if (scope === _NormalNode.WORLD) {
      const vertexNormalNode = new MathNode(
        MathNode.TRANSFORM_DIRECTION,
        new _NormalNode(_NormalNode.VIEW),
        new CameraNode(CameraNode.VIEW_MATRIX)
      );
      outputNode = new MathNode(MathNode.NORMALIZE, new VaryNode(vertexNormalNode));
    }
    return outputNode.build(builder);
  }
  serialize(data) {
    super.serialize(data);
    data.scope = this.scope;
  }
  deserialize(data) {
    super.deserialize(data);
    this.scope = data.scope;
  }
};
let NormalNode = _NormalNode;
__publicField(NormalNode, "GEOMETRY", "geometry");
__publicField(NormalNode, "LOCAL", "local");
__publicField(NormalNode, "WORLD", "world");
__publicField(NormalNode, "VIEW", "view");
export {
  NormalNode as default
};
