"use strict";
const Node = require("../core/Node.js");
const Object3DNode = require("../accessors/Object3DNode.js");
const PositionNode = require("../accessors/PositionNode.js");
const UniformNode = require("../core/UniformNode.js");
const OperatorNode = require("../math/OperatorNode.js");
const MathNode = require("../math/MathNode.js");
const constants = require("../core/constants.js");
const BSDFs = require("../functions/BSDFs.js");
const THREE = require("three");
class LightNode extends Node {
  constructor(light = null) {
    super("vec3");
    this.updateType = constants.NodeUpdateType.Object;
    this.light = light;
    this._colorNode = new UniformNode(new THREE.Color());
    this._lightCutoffDistanceNode = new UniformNode(0);
    this._lightDecayExponentNode = new UniformNode(0);
  }
  getHash() {
    return this.light.uuid;
  }
  update() {
    this._colorNode.value.copy(this.light.color).multiplyScalar(this.light.intensity);
    this._lightCutoffDistanceNode.value = this.light.distance;
    this._lightDecayExponentNode.value = this.light.decay;
  }
  generate(builder) {
    const lightPositionView = new Object3DNode(Object3DNode.VIEW_POSITION);
    const positionView = new PositionNode(PositionNode.VIEW);
    const lVector = new OperatorNode("-", lightPositionView, positionView);
    const lightDirection = new MathNode(MathNode.NORMALIZE, lVector);
    const lightDistance = new MathNode(MathNode.LENGTH, lVector);
    const lightAttenuation = BSDFs.getDistanceAttenuation({
      lightDistance,
      cutoffDistance: this._lightCutoffDistanceNode,
      decayExponent: this._lightDecayExponentNode
    });
    const lightColor = new OperatorNode("*", this._colorNode, lightAttenuation);
    lightPositionView.object3d = this.light;
    const lightingModelFunction = builder.context.lightingModel;
    if (lightingModelFunction !== void 0) {
      const directDiffuse = builder.context.directDiffuse;
      const directSpecular = builder.context.directSpecular;
      lightingModelFunction(
        {
          lightDirection,
          lightColor,
          directDiffuse,
          directSpecular
        },
        builder
      );
    }
  }
}
module.exports = LightNode;
